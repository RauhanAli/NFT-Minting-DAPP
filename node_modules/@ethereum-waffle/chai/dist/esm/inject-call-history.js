import { utils } from 'ethers';
/**
 * Injects call history into hardhat provider,
 * making it possible to use matchers like calledOnContract
 */
class CallHistory {
    constructor() {
        this.recordedCalls = [];
    }
    addUniqueCall(call) {
        if (!this.recordedCalls.find(c => c.address === call.address && c.data === call.data)) {
            this.recordedCalls.push(call);
        }
    }
    clearAll() {
        this.recordedCalls = [];
    }
}
function toRecordedCall(message) {
    var _a;
    return {
        address: ((_a = message.to) === null || _a === void 0 ? void 0 : _a.buf) ? utils.getAddress(utils.hexlify(message.to.buf)) : undefined,
        data: message.data ? utils.hexlify(message.data) : '0x'
    };
}
const inject = () => {
    var _a, _b, _c, _d, _e, _f, _g;
    let waffle;
    try {
        waffle = (_a = require('hardhat')) === null || _a === void 0 ? void 0 : _a.waffle;
    }
    catch (_h) {
        return;
    }
    if (!waffle || !waffle.provider)
        return;
    const callHistory = new CallHistory();
    waffle.provider.clearCallHistory = () => {
        callHistory.clearAll();
    };
    let beforeMessageListener;
    const init = (_g = (_f = (_e = (_d = (_c = (_b = waffle.provider) === null || _b === void 0 ? void 0 : _b._hardhatNetwork) === null || _c === void 0 ? void 0 : _c.provider) === null || _d === void 0 ? void 0 : _d._wrapped) === null || _e === void 0 ? void 0 : _e._wrapped) === null || _f === void 0 ? void 0 : _f._wrapped) === null || _g === void 0 ? void 0 : _g._init;
    if (!init)
        return;
    waffle.provider._hardhatNetwork.provider._wrapped._wrapped._wrapped._init = async function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        await init.apply(this);
        if (typeof beforeMessageListener === 'function') {
            // has to be here because of weird behaviour of init function, which requires us to re-register the handler.
            (_k = (_j = (_h = (_g = (_f = (_e = (_d = (_c = (_b = (_a = waffle.provider) === null || _a === void 0 ? void 0 : _a._hardhatNetwork) === null || _b === void 0 ? void 0 : _b.provider) === null || _c === void 0 ? void 0 : _c._wrapped) === null || _d === void 0 ? void 0 : _d._wrapped) === null || _e === void 0 ? void 0 : _e._wrapped) === null || _f === void 0 ? void 0 : _f._node) === null || _g === void 0 ? void 0 : _g._vmTracer) === null || _h === void 0 ? void 0 : _h._vm) === null || _j === void 0 ? void 0 : _j.off) === null || _k === void 0 ? void 0 : _k.call(_j, 'beforeMessage', beforeMessageListener);
        }
        beforeMessageListener = (message) => {
            callHistory.addUniqueCall(toRecordedCall(message));
        };
        waffle.provider.callHistory = callHistory.recordedCalls;
        (_t = (_s = (_r = (_q = (_p = (_o = (_m = (_l = waffle.provider) === null || _l === void 0 ? void 0 : _l._hardhatNetwork.provider) === null || _m === void 0 ? void 0 : _m._wrapped._wrapped) === null || _o === void 0 ? void 0 : _o._wrapped) === null || _p === void 0 ? void 0 : _p._node) === null || _q === void 0 ? void 0 : _q._vmTracer) === null || _r === void 0 ? void 0 : _r._vm) === null || _s === void 0 ? void 0 : _s.on) === null || _t === void 0 ? void 0 : _t.call(_s, 'beforeMessage', beforeMessageListener);
    };
};
let injected = false;
if (!injected && !!process.env.WAFFLE_EXPERIMENTAL_HARDHAT_CALL_HISTORY) {
    injected = true;
    inject();
}
